{
	"info": {
		"_postman_id": "e7f2ca3e-c1e4-4220-b995-6d9d66b8b7b6",
		"name": "ffc-multi-variation-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.collectionVariables.set(\"token\", jsonData.token);\r",
							"\r",
							"console.log(jsonData);\r",
							"tests[\"name = \" + jsonData.token] = true;\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\");\r",
							"});\r",
							"\r",
							"console.log('#########LOGIN END#######');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('#########LOGIN STARTED#######');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"identity\": \"me@hu-beau.com\",\r\n  \"password\": \"OTgxZDhiNmMt\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/api/v2/user/login-by-password",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"api",
						"v2",
						"user",
						"login-by-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Feature Flag",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('#########Create feature flag STARTED#######');\r",
							"\r",
							"\r",
							"var flagName = \"flag\" + new Date().getTime();\r",
							"pm.environment.set(\"flag-name\", flagName);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"console.log(jsonData);\r",
							"pm.collectionVariables.set(\"featureFlagId\", jsonData.id);\r",
							"\r",
							"console.log('#########Create feature flag END#######');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{flag-name}}\",\r\n  \"environmentId\": {{environmentId}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/FeatureFlags/CreateFeatureFlag",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"FeatureFlags",
						"CreateFeatureFlag"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Feature Flag",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('#########Get feature flag STARTED#######');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Successful Get request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"console.log(jsonData);\r",
							"\r",
							"pm.collectionVariables.set(\"featureFlagName\", jsonData.ff.name);\r",
							"pm.collectionVariables.set(\"featureFlagKeyName\", jsonData.ff.keyName);\r",
							"\r",
							"\r",
							"console.log('#########Create feature flag END#######');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/FeatureFlags/GetFeatureFlag?id={{featureFlagId}}",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"FeatureFlags",
						"GetFeatureFlag"
					],
					"query": [
						{
							"key": "id",
							"value": "{{featureFlagId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Feature Flag",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('#########Update feature flag STARTED#######');\r",
							"var dataSampleStr = pm.collectionVariables.get(\"dataSample0\");\r",
							"\r",
							"dataSampleStr = dataSampleStr.replace('##{featureFlagId}##', pm.variables.get(\"featureFlagId\"));\r",
							"dataSampleStr = dataSampleStr.replace('##{featureFlagId}##', pm.variables.get(\"featureFlagId\"));\r",
							"dataSampleStr = dataSampleStr.replace('##{featureFlagName}##', pm.variables.get(\"featureFlagName\"));\r",
							"dataSampleStr = dataSampleStr.replace('##{featureFlagKeyName}##', pm.variables.get(\"featureFlagKeyName\"));\r",
							"\r",
							"console.log(JSON.parse(dataSampleStr));\r",
							"\r",
							"pm.collectionVariables.set(\"dataSample0-update\", dataSampleStr);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							"console.log('#########Update feature flag END#######');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{dataSample0-update}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/FeatureFlags/UpdateFeatureFlag",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"FeatureFlags",
						"UpdateFeatureFlag"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Feature Flag For Update Validation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('#########Get feature flag for validation STARTED#######');\r",
							"\r",
							"// console.log(pm.collectionVariables.get(\"dataSample0-update\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = JSON.parse(responseBody);\r",
							"\r",
							"var updateData = JSON.parse(pm.collectionVariables.get(\"dataSample0-update\"));\r",
							"\r",
							"console.log(\"updateData\");\r",
							"console.log(updateData);\r",
							"console.log(\"responseData\");\r",
							"console.log(responseData);\r",
							"\r",
							"pm.test(\"Random validation\", function () {\r",
							"    pm.expect(responseData.ff.keyName).to.be.eq(updateData.ff.keyName);\r",
							"    pm.expect(responseData.ff.id).to.be.eq(updateData.ff.id);\r",
							"    pm.expect(JSON.stringify(responseData.ff.defaultRulePercentageRollouts)).to.be.eq(JSON.stringify(updateData.ff.defaultRulePercentageRollouts));\r",
							"    pm.expect(responseData.fftuwmtr[0].RuleId).to.be.eq(updateData.fftuwmtr[0].ruleId);\r",
							"    pm.expect(JSON.stringify(responseData.fftuwmtr[0].valueOptionsVariationRuleValues)).to.be.eq(JSON.stringify(updateData.fftuwmtr[0].valueOptionsVariationRuleValues));\r",
							"\r",
							"    pm.expect(JSON.stringify(responseData.targetIndividuals[0])).to.be.eq(JSON.stringify(updateData.targetIndividuals[0]));\r",
							"    pm.expect(JSON.stringify(responseData.variationOptions)).to.be.eq(JSON.stringify(updateData.variationOptions));\r",
							"});\r",
							"\r",
							"console.log('#########Create feature flag for validation END#######');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/FeatureFlags/GetFeatureFlag?id={{featureFlagId}}",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"FeatureFlags",
						"GetFeatureFlag"
					],
					"query": [
						{
							"key": "id",
							"value": "{{featureFlagId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Varation - Target Individuals",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"console.log('#########Get Varation - Target Individuals STARTED#######');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = JSON.parse(responseBody);\r",
							"var updateData = JSON.parse(pm.collectionVariables.get(\"dataSample0-update\"));\r",
							"\r",
							"// var groupIndex = -1;\r",
							"// for (var i = 0; i < updateData.targetIndividuals.length; i++) {\r",
							"//     var ti = updateData.targetIndividuals[0];\r",
							"//     var ifInGroup = ti.individuals.some(p=> p.keyId === \"user-3@feature-flags.test\" );\r",
							"//     if(ifInGroup){\r",
							"//         groupIndex = i;\r",
							"//     }\r",
							"// }\r",
							"\r",
							"// console.log(groupIndex);\r",
							"\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    var ti = updateData.targetIndividuals[0];\r",
							"    console.log(ti);\r",
							"    pm.expect(responseData.data.id).to.be.eq(ti.valueOption.localId);\r",
							"});\r",
							"\r",
							"console.log('#########Get Varation - Target Individuals END#######');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "envSecret",
						"value": "{{environmentSecret}}",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"featureFlagKeyName\": \"{{featureFlagKeyName}}\",\r\n    \"userName\": \"nuser-3\",\r\n    \"email\": \"nuser-3@feature-flags.test\",\r\n    \"userKeyId\": \"nuser-3@feature-flags.test\",\r\n    \"customizedProperties\": [\r\n        {\r\n            \"name\": \"property-0\",\r\n            \"value\": \"value-0\"\r\n        },\r\n        {\r\n            \"name\": \"property-1\",\r\n            \"value\": \"530\"\r\n        },\r\n        {\r\n            \"name\": \"property-2\",\r\n            \"value\": \"true\"\r\n        },\r\n        {\r\n            \"name\": \"property-3\",\r\n            \"value\": \"value-3\"\r\n        },\r\n        {\r\n            \"name\": \"property-4\",\r\n            \"value\": \"905\"\r\n        },\r\n        {\r\n            \"name\": \"property-5\",\r\n            \"value\": \"true\"\r\n        },\r\n        {\r\n            \"name\": \"property-6\",\r\n            \"value\": \"value-6\"\r\n        },\r\n        {\r\n            \"name\": \"property-7\",\r\n            \"value\": \"575\"\r\n        },\r\n        {\r\n            \"name\": \"property-8\",\r\n            \"value\": \"true\"\r\n        },\r\n        {\r\n            \"name\": \"property-9\",\r\n            \"value\": \"value-9\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/api/public/feature-flag/variation",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"api",
						"public",
						"feature-flag",
						"variation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Varation - fftuwmtr - condition 0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"console.log('#########Get Varation - fftuwmtr condition 0 STARTED#######');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = JSON.parse(responseBody);\r",
							"var updateData = JSON.parse(pm.collectionVariables.get(\"dataSample0-update\"));\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    var valueOptionsVariationRuleValues = updateData.fftuwmtr[0].valueOptionsVariationRuleValues;\r",
							"    var localIds = [];\r",
							"    for (var i = 0; i < valueOptionsVariationRuleValues.length; i++) {\r",
							"        localIds.push(valueOptionsVariationRuleValues[i].valueOption.localId);\r",
							"    }\r",
							"\r",
							"    pm.expect(localIds).to.include(responseData.data.id);\r",
							"});\r",
							"\r",
							"console.log('#########Get Varation - fftuwmtr condition 0 END#######');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "envSecret",
						"value": "{{environmentSecret}}",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"featureFlagKeyName\": \"{{featureFlagKeyName}}\",\r\n    \"userName\": \"nuser-9\",\r\n    \"email\": \"nuser-9@feature-flags.test\",\r\n    \"userKeyId\": \"nuser-9@feature-flags.test\",\r\n    \"customizedProperties\": [\r\n        {\r\n            \"name\": \"property-0\",\r\n            \"value\": \"value-0\"\r\n        },\r\n        {\r\n            \"name\": \"property-1\",\r\n            \"value\": \"530\"\r\n        },\r\n        {\r\n            \"name\": \"property-2\",\r\n            \"value\": \"true\"\r\n        },\r\n        {\r\n            \"name\": \"property-3\",\r\n            \"value\": \"value-3\"\r\n        },\r\n        {\r\n            \"name\": \"property-4\",\r\n            \"value\": \"905\"\r\n        },\r\n        {\r\n            \"name\": \"property-5\",\r\n            \"value\": \"true\"\r\n        },\r\n        {\r\n            \"name\": \"property-6\",\r\n            \"value\": \"value-6\"\r\n        },\r\n        {\r\n            \"name\": \"property-7\",\r\n            \"value\": \"575\"\r\n        },\r\n        {\r\n            \"name\": \"property-8\",\r\n            \"value\": \"true\"\r\n        },\r\n        {\r\n            \"name\": \"property-9\",\r\n            \"value\": \"value-9\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/api/public/feature-flag/variation",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"api",
						"public",
						"feature-flag",
						"variation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Varation - fftuwmtr - condition 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"console.log('#########Get Varation - fftuwmtr condition 1 STARTED#######');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = JSON.parse(responseBody);\r",
							"var updateData = JSON.parse(pm.collectionVariables.get(\"dataSample0-update\"));\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    var valueOptionsVariationRuleValues = updateData.fftuwmtr[1].valueOptionsVariationRuleValues;\r",
							"    var localIds = [];\r",
							"    for (var i = 0; i < valueOptionsVariationRuleValues.length; i++) {\r",
							"        localIds.push(valueOptionsVariationRuleValues[i].valueOption.localId);\r",
							"    }\r",
							"\r",
							"    pm.expect(localIds).to.include(responseData.data.id);\r",
							"});\r",
							"\r",
							"console.log('#########Get Varation - fftuwmtr condition 1 END#######');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "envSecret",
						"value": "{{environmentSecret}}",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"featureFlagKeyName\": \"{{featureFlagKeyName}}\",\r\n    \"userName\": \"nuser-10\",\r\n    \"userEmail\": \"nuser-10@feature-flags.test\",\r\n    \"userKeyId\": \"nuser-10@feature-flags.test\",\r\n    \"customizedProperties\": [\r\n        {\r\n            \"name\": \"property-1\",\r\n            \"value\": \"99\"\r\n        },\r\n        {\r\n            \"name\": \"property-3\",\r\n            \"value\": \"550\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/api/public/feature-flag/variation",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"api",
						"public",
						"feature-flag",
						"variation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Varation - fftuwmtr - condition 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"console.log('#########Get Varation - fftuwmtr condition 2 STARTED#######');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = JSON.parse(responseBody);\r",
							"var updateData = JSON.parse(pm.collectionVariables.get(\"dataSample0-update\"));\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    var valueOptionsVariationRuleValues = updateData.fftuwmtr[2].valueOptionsVariationRuleValues;\r",
							"    var localIds = [];\r",
							"    for (var i = 0; i < valueOptionsVariationRuleValues.length; i++) {\r",
							"        localIds.push(valueOptionsVariationRuleValues[i].valueOption.localId);\r",
							"    }\r",
							"\r",
							"    pm.expect(localIds).to.include(responseData.data.id);\r",
							"});\r",
							"\r",
							"console.log('#########Get Varation - fftuwmtr condition 2 END#######');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "envSecret",
						"value": "{{environmentSecret}}",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"featureFlagKeyName\": \"{{featureFlagKeyName}}\",\r\n    \"userName\": \"nuser-11\",\r\n    \"email\": \"nuser-11@feature-flags.test\",\r\n    \"userKeyId\": \"nuser-11@feature-flags.test\",\r\n    \"customizedProperties\": [\r\n        {\r\n            \"name\": \"property-2\",\r\n            \"value\": \"true\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/api/public/feature-flag/variation",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"api",
						"public",
						"feature-flag",
						"variation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Varation - DefaultRulePercentageRollouts",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"console.log('#########Get Varation - DefaultRulePercentageRollouts STARTED#######');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = JSON.parse(responseBody);\r",
							"var updateData = JSON.parse(pm.collectionVariables.get(\"dataSample0-update\"));\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    var localIds = [];\r",
							"    for (var i = 0; i < updateData.ff.defaultRulePercentageRollouts.length; i++) {\r",
							"        localIds.push(updateData.ff.defaultRulePercentageRollouts[i].valueOption.localId);\r",
							"    }\r",
							"    pm.expect(localIds).to.include(responseData.data.id);\r",
							"});\r",
							"\r",
							"console.log('#########Get Varation - DefaultRulePercentageRollouts END#######');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "envSecret",
						"value": "{{environmentSecret}}",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"featureFlagKeyName\": \"{{featureFlagKeyName}}\",\r\n    \"userName\": \"nuser-5\",\r\n    \"email\": \"nuser-5@feature-flags.test\",\r\n    \"userKeyId\": \"nuser-5@feature-flags.test\",\r\n    \"customizedProperties\": [\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/api/public/feature-flag/variation",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"api",
						"public",
						"feature-flag",
						"variation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Disable Feature Flag",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('#########Disable Feature Flag STARTED#######');\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"\r",
							"\r",
							"console.log('#########Disable Feature Flag END#######');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{featureFlagId}}\",\r\n    \"status\": \"Disabled\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/FeatureFlags/SwitchFeatureFlag",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"FeatureFlags",
						"SwitchFeatureFlag"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Varation - When Disabled",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"console.log('#########Get Varation - When Disabled STARTED#######');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = JSON.parse(responseBody);\r",
							"var updateData = JSON.parse(pm.collectionVariables.get(\"dataSample0-update\"));\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(responseData.data.id).to.be.eq(updateData.ff.variationOptionWhenDisabled.localId);\r",
							"});\r",
							"\r",
							"console.log('#########Get Varation - When Disabled END#######');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "envSecret",
						"value": "{{environmentSecret}}",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"featureFlagKeyName\": \"{{featureFlagKeyName}}\",\r\n    \"userName\": \"nuser-5\",\r\n    \"userEmail\": \"nuser-5@feature-flags.test\",\r\n    \"userKeyId\": \"nuser-5@feature-flags.test\",\r\n    \"customizedProperties\": [\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apihost}}/api/public/feature-flag/variation",
					"host": [
						"{{apihost}}"
					],
					"path": [
						"api",
						"public",
						"feature-flag",
						"variation"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.globals.get(\"variable_key\");",
					"",
					"var environmentSecret = \"YzA4LTUxZTEtNCUyMDIxMDkwMjEwNDQ1N19fMl9fMl9fNF9fZGVmYXVsdF9kNmZlNQ==\";",
					"var environmentId = 4;",
					"",
					"pm.collectionVariables.set(\"environmentId\", environmentId);",
					"pm.collectionVariables.set(\"projectId\", 2);",
					"pm.collectionVariables.set(\"organizationId\", 2);",
					"pm.collectionVariables.set(\"organizationId\", 2);",
					"pm.collectionVariables.set(\"environmentSecret\", environmentSecret)",
					"",
					"var users = generateUsers(environmentSecret);",
					"var variationOptions = generateVariationOptions(5);",
					"",
					"for (var i = 0; i < 1; i++) {",
					"    var defaultRulePercentageRollouts = generateDefaultRulePercentageRollouts(variationOptions.length);",
					"    var variationOptionWhenDisabled = randomGetVariationOption(variationOptions);",
					"    var targetIndividuals = generateRandomlyTargetIndividuals(variationOptions, users);",
					"    // initialize static test data. ",
					"    for(var r = 0;r<targetIndividuals.length;r++){",
					"        var idividuals = targetIndividuals[r].individuals;     ",
					"",
					"        // data for test \"Get Varation - DefaultRulePercentageRollouts\"",
					"        var index = idividuals.findIndex(p=>p.keyId === \"nuser-5@feature-flags.test\");",
					"        if(index !== -1)",
					"            idividuals.splice(index, 1);",
					"        // data for test \"Get Varation - fftuwmtr - condition 0\"",
					"        index = idividuals.findIndex(p=>p.keyId === \"nuser-9@feature-flags.test\");",
					"        if(index !== -1)",
					"            idividuals.splice(index, 1);",
					"        // data for test \"Get Varation - fftuwmtr - condition 1\"",
					"        index = idividuals.findIndex(p=>p.keyId === \"nuser-10@feature-flags.test\");",
					"        if(index !== -1)",
					"            idividuals.splice(index, 1); ",
					"        // data for test \"Get Varation - fftuwmtr - condition 2\"",
					"        index = idividuals.findIndex(p=>p.keyId === \"nuser-11@feature-flags.test\");",
					"        if(index !== -1)",
					"            idividuals.splice(index, 1); ",
					"    }",
					"    // data for test \"Get Varation - Target Individuals\"",
					"    targetIndividuals[0].individuals.push({",
					"        \"id\": \"WU__\" + environmentId + \"__nuser-3@feature-flags.test\",",
					"        \"name\": \"nuser-3\",",
					"        \"keyId\": \"nuser-3@feature-flags.test\",",
					"        \"email\": \"nuser-3@feature-flags.test\"",
					"    });",
					"",
					"    var fftuwmtr = generateFFTUWMTR(variationOptions);",
					"    var testData = {",
					"        \"id\": \"##{featureFlagId}##\",",
					"        \"environmentId\": environmentId,",
					"        \"objectType\": \"FeatureFlag\",",
					"        \"ff\": {",
					"            \"id\": \"##{featureFlagId}##\",",
					"            \"name\": \"##{featureFlagName}##\",",
					"            \"keyName\": \"##{featureFlagKeyName}##\",",
					"            \"environmentId\": environmentId,",
					"            \"status\": \"Enabled\",",
					"            \"defaultRulePercentageRollouts\": defaultRulePercentageRollouts,",
					"            \"variationOptionWhenDisabled\": variationOptionWhenDisabled",
					"        },",
					"        \"ffp\": [",
					"        ],",
					"        \"fftuwmtr\": fftuwmtr,",
					"        \"targetIndividuals\": targetIndividuals,",
					"        \"variationOptions\": variationOptions,",
					"        \"isMultiOptionMode\": true",
					"    }",
					"",
					"",
					"    console.log(testData);",
					"    pm.collectionVariables.set(\"dataSample\" + i, JSON.stringify(testData));",
					"}",
					"",
					"",
					"",
					"",
					"",
					"// ======================== ==============================================",
					"",
					"function getRandomArbitrary(min, max) {",
					"    return Math.random() * (max - min) + min;",
					"}",
					"function getRandomInt(min, max) {",
					"    min = Math.ceil(min);",
					"    max = Math.floor(max);",
					"    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive",
					"}",
					"function randomPercentagesAddUpTo100(amount, min, max) {",
					"    const arr = [];",
					"    let total = 0;",
					"",
					"    // fill an array with random numbers",
					"    for (let i = 0; i < amount; i++) arr.push(getRandomInt(min, max));",
					"",
					"    // add up all the numbers",
					"    for (let i = 0; i < amount; i++) total += arr[i];",
					"",
					"    // normalise so numbers add up to 1",
					"    for (let i = 0; i < amount; i++) arr[i] /= total;",
					"",
					"    return arr;",
					"};",
					"function arraySum(arr, stopIndex) {",
					"    var sum = 0;",
					"    for (let i = 0; i < stopIndex; i++) {",
					"        sum += arr[i];",
					"    }",
					"    return sum;",
					"}",
					"function randomGetVariationOption(vops) {",
					"    return vops[getRandomInt(0, vops.length - 1)];",
					"}",
					"",
					"function generateDefaultRulePercentageRollouts(variationOptionCount) {",
					"    var defaultRulePercentageRollouts = [];",
					"    var defaultRuleRolloutCount = getRandomInt(1, variationOptionCount);",
					"    var existedVariaIndexes = [];",
					"    var percentages = randomPercentagesAddUpTo100(defaultRuleRolloutCount, 1, 5);",
					"    var percentageRanges = [];",
					"    for (var r = 0; r < percentages.length; r++) {",
					"        var p = Math.round(arraySum(percentages, r + 1) * 100) / 100;",
					"        var sum = Math.round(arraySum(percentages, r) * 100) / 100;",
					"        var percentageRange = [sum, p];",
					"        percentageRanges.push(percentageRange);",
					"    }",
					"    for (var r = 0; r < defaultRuleRolloutCount; r++) {",
					"        var variaIndex = getRandomInt(0, variationOptionCount);",
					"        while (existedVariaIndexes.includes(variaIndex) === true) {",
					"            variaIndex = getRandomInt(0, variationOptionCount);",
					"        }",
					"        existedVariaIndexes.push(variaIndex);",
					"",
					"        defaultRulePercentageRollouts.push({",
					"            \"exptRollout\": null,",
					"            \"rolloutPercentage\": percentageRanges[r],",
					"            \"valueOption\": variationOptions[variaIndex]",
					"        });",
					"",
					"    }",
					"",
					"    return defaultRulePercentageRollouts",
					"}",
					"function generateVariationOptions(variationOptionCount) {",
					"    var variationOptions = [];",
					"    for (var i = 0; i < variationOptionCount; i++) {",
					"        variationOptions.push({",
					"            \"localId\": i,",
					"            \"displayOrder\": i,",
					"            \"variationValue\": \"Value\" + i",
					"        });",
					"    }",
					"    return variationOptions;",
					"}",
					"function generateFFUserCustomizedProperties() {",
					"    var cps = [];",
					"    for (var i = 0; i < 10; i++) {",
					"        value = \"\";",
					"        if (i % 3 === 0) {",
					"            value = \"value-\" + i",
					"        }",
					"        else if (i % 3 === 1) {",
					"            value = getRandomInt(0, 999);",
					"        }",
					"        else if (i % 3 == 2) {",
					"            value = (getRandomInt(1, 2) % 2 === 1);",
					"        }",
					"        cps.push({",
					"            \"name\": \"property-\" + i,",
					"            \"value\": `${value}`",
					"        });",
					"    }",
					"    return cps;",
					"}",
					"function generateUsers(environmentSecret) {",
					"    var users = [];",
					"    var userCount = 100;",
					"    var customizedProperties = generateFFUserCustomizedProperties();",
					"    console.log(JSON.stringify(customizedProperties));",
					"    for (var i = 0; i < userCount; i++) {",
					"        users.push({",
					"            \"featureFlagKeyName\": \"\",",
					"            \"environmentSecret\": environmentSecret,",
					"            \"ffUserName\": \"nuser-\" + i,",
					"            \"ffUserEmail\": \"nuser-\" + i + \"@feature-flags.test\",",
					"            \"ffUserKeyId\": \"nuser-\" + i + \"@feature-flags.test\",",
					"            \"ffUserCustomizedProperties\": customizedProperties",
					"        });",
					"    }",
					"    return users;",
					"}",
					"function generateRandomlyTargetIndividuals(variationOptions, users, environmentId) {",
					"    var targetIndividuals = [];",
					"    var targetIndividualsCount = getRandomInt(1, variationOptions.length);",
					"    for (var i = 0; i < targetIndividualsCount; i++) {",
					"        var ti = {",
					"            individuals: [],",
					"            valueOption: null",
					"        };",
					"        var targetIndividualUserCount = getRandomInt(1, users.length);",
					"        var selectedUsers = getRandomElementsFromArray(users, Math.floor(users.length / targetIndividualsCount - 1));",
					"        var variationOption = getRandomElementsFromArray(variationOptions, 1);",
					"        for (var j = 0; j < selectedUsers.length; j++) {",
					"            ti.individuals.push({",
					"                \"id\": \"WU__\" + environmentId + \"__\" + selectedUsers[j].ffUserKeyId,",
					"                \"name\": selectedUsers[j].ffUserName,",
					"                \"keyId\": selectedUsers[j].ffUserKeyId,",
					"                \"email\": selectedUsers[j].ffUserEmail",
					"            });",
					"        }",
					"        ti.valueOption = variationOption[0];",
					"        targetIndividuals.push(ti);",
					"    }",
					"",
					"    return targetIndividuals;",
					"}",
					"function getRandomElementsFromArray(arr, n) {",
					"    var result = new Array(n),",
					"        len = arr.length,",
					"        taken = new Array(len);",
					"    if (n > len)",
					"        throw new RangeError(\"getRandom: more elements taken than available\");",
					"    while (n--) {",
					"        var x = Math.floor(Math.random() * len);",
					"        result[n] = arr[x in taken ? taken[x] : x];",
					"        taken[x] = --len in taken ? taken[len] : len;",
					"    }",
					"    return result;",
					"}",
					"function uuidv4() {",
					"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {",
					"        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
					"        return v.toString(16);",
					"    });",
					"}",
					"function generateFFTUWMTR(variationOptions) {",
					"    var fftuvmtr = [];",
					"    for (var i = 0; i < 3; i++) {",
					"        var valueOptionsVariationRuleValues = generateDefaultRulePercentageRollouts(variationOptions.length);",
					"        var fft = {",
					"            \"RuleId\": uuidv4(),",
					"            \"RuleName\": \"rule\" + i,",
					"            \"RuleJsonContent\": [",
					"            ],",
					"            \"valueOptionsVariationRuleValues\": valueOptionsVariationRuleValues",
					"        };",
					"        if (i % 3 === 0) {",
					"            fft.RuleJsonContent = [",
					"                {",
					"                    \"property\": \"property-0\",",
					"                    \"operation\": \"Contains\",",
					"                    \"value\": \"value-\"",
					"                },",
					"                {",
					"                    \"property\": \"property-3\",",
					"                    \"operation\": \"StartsWith\",",
					"                    \"value\": \"value\"",
					"                },",
					"                {",
					"                    \"property\": \"property-6\",",
					"                    \"operation\": \"EndsWith\",",
					"                    \"value\": \"-6\"",
					"                }",
					"            ];",
					"        }",
					"        else if (i % 3 === 1) {",
					"            fft.RuleJsonContent = [",
					"                {",
					"                    \"property\": \"property-1\",",
					"                    \"operation\": \"BiggerEqualThan\",",
					"                    \"value\": \"99\"",
					"                },",
					"                {",
					"                    \"property\": \"property-3\",",
					"                    \"operation\": \"LessEqualThan\",",
					"                    \"value\": \"699\"",
					"                }",
					"            ];",
					"            value = getRandomInt(0, 999);",
					"        }",
					"        else if (i % 3 == 2) {",
					"            fft.RuleJsonContent = [",
					"                {",
					"                    \"property\": \"property-2\",",
					"                    \"operation\": \"IsTrue\",",
					"                    \"value\": \"true\"",
					"                }",
					"            ];",
					"        }",
					"",
					"        fftuvmtr.push(fft);",
					"    }",
					"",
					"    return fftuvmtr;",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apihost",
			"value": "https://ffc-api-ce2-dev.chinacloudsites.cn"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "environmentId",
			"value": ""
		},
		{
			"key": "projectId",
			"value": ""
		},
		{
			"key": "organizationId",
			"value": ""
		},
		{
			"key": "featureFlagId",
			"value": ""
		},
		{
			"key": "featureFlag",
			"value": ""
		},
		{
			"key": "featureFlagName",
			"value": ""
		},
		{
			"key": "featureFlagKeyName",
			"value": ""
		},
		{
			"key": "environmentSecret",
			"value": ""
		},
		{
			"key": "dataSample0-update",
			"value": ""
		},
		{
			"key": "dataSample0",
			"value": ""
		}
	]
}