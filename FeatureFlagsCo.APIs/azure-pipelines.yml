# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger: none


pool:
  vmImage: windows-latest

variables:
- group: MJKG_API_SETTINGS
- name: buildConfiguration
  value: Release


stages:

- stage: 'Development'
  jobs:
  - deployment: 'DeployToDevelopment'
    environment: 'Approval_API_Dev'
    strategy:
        runOnce:
          deploy:
            steps:
              - script: |
                  dir
                  
              - checkout: self
              - task: UseDotNet@2
                displayName: Install .NET Core SDK
                inputs:
                  version: 3.1.x
                  packageType: runtime

              - task: PowerShell@2
                displayName: Replace Settings
                inputs:
                  targetType: 'inline'
                  script: |
                    cd FeatureFlagsCo.APIs/FeatureFlags.APIs
                    $pathToJson = "appsettings.json"
                    $a = Get-Content $pathToJson | ConvertFrom-Json
            
                    $a.ConnectionStrings.ConnStr = "$(SQLDATABASE_ConnectionString_Dev)"
                    $a.ConnectionStrings.RedisServerUrl = "$(REDISCACHE_ConnectionString_Dev)"
                    $a.JWT.Secret = "$(JWT_Secret_Dev)"

                    $a.ApplicationInsights.InstrumentationKey = "$(AppInsights_InstrumentationKey_Dev)"
                    $a.ApplicationInsights.ConnectionString = "$(AppInsights_ConnectionString_Dev)"

                    $a.MySettings.AppInsightsApplicationId = "$(AppInsights_ApplicationId_Dev)"
                    $a.MySettings.AppInsightsApplicationApiSecret = "$(AppInsights_ApplicationApiSecret_Dev)"

                    $a.MySettings.InsightsRabbitMqUrl = "$(MySettings_InsightsRabbitMqUrl_Dev)"
                    $a.MySettings.ElasticSearchHost = "$(MySettings_ElasticSearchHost_Dev)"
                    $a.MySettings.CacheType = "$(MySettings_CacheType_Dev)"
                    
                    $a.MySettings.ExperimentsServiceHost = "$(MySettings_ExperimentsServiceHost_Dev)"
                    $a.MySettings.MessagingServiceHost = "$(MySettings_MessagingServiceHost_Dev)"

                    $a.MongoDbSettings.ConnectionString = "$(MongoDbSettings_ConnectionString_Dev)"
                    $a.MongoDbSettings.DatabaseName = "$(MongoDbSettings_DatabaseName_Dev)"

                    # authing service variables
                    $a.Authing.AppId = "$(Authing_AppId_Dev)"

                    ConvertTo-Json $a -depth 100  | set-content $pathToJson

                    $pathToJsonCheck = "appsettings.json"
                    $aCheck = Get-Content $pathToJson | ConvertFrom-Json
                    Write-Host $aCheck.ConnectionStrings.ConnStr
                    Write-Host $aCheck.ConnectionStrings.RedisServerUrl
                    Write-Host $aCheck.JWT.Secret
                    Write-Host $aCheck.ApplicationInsights.InstrumentationKey
                    Write-Host $aCheck.ApplicationInsights.ConnectionString
                    Write-Host $aCheck.MySettings.AppInsightsApplicationId
                    Write-Host $aCheck.MySettings.AppInsightsApplicationApiSecret
                    Write-Host $aCheck.MySettings.ExperimentsServiceHost

              
              - task: DotNetCoreCLI@2
                displayName: dotnet restore api
                inputs:
                  command: restore
                  projects: '**/FeatureFlagsCo.APIs/FeatureFlags.APIs/FeatureFlags.APIs.csproj'
              - task: DotNetCoreCLI@2
                displayName: dotnet build api
                inputs:
                  command: 'build'
                  projects: '**/FeatureFlagsCo.APIs/FeatureFlags.APIs/FeatureFlags.APIs.csproj'
                  
              - task: DotNetCoreCLI@2
                inputs:
                  command: publish
                  publishWebProjects: True
                  arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
                  zipAfterPublish: True
              - task: AzureWebApp@1
                inputs:
                  azureSubscription: 'azure-china-devops'
                  appType: 'webApp'
                  appName: 'ffc-api-ce2-dev'
                  package: '$(Build.ArtifactStagingDirectory)/**/FeatureFlags.APIs.zip'
                  deploymentMethod: 'auto'

    
     

- stage: 'DevelopmentIntegrationTest'
  jobs:
  - deployment: 'DevIntegrationTest'
    environment: 'Approval_API_Dev'
    condition: succeeded()
    strategy:
        runOnce:
          deploy:
            steps:
              - script: |
                  dir
                  
              - checkout: self

              - task: PowerShell@2
                displayName: Replace Postman Setting
                inputs:
                  targetType: 'inline'
                  script: |
                    cd FeatureFlagsCo.APIs/FeatureFlagsCo.APIs.Tests/Postman.IntegrationTests
                    
                    $pathToJson = "ffc-multi-variation-test.json"
                    $a = Get-Content $pathToJson | ConvertFrom-Json
                    Write-Host $a
                    $a.variable[0].value = "$(API_URL_Dev)"
                    ConvertTo-Json $a -depth 100  | set-content $pathToJson
                    
                    $pathToJsonCheck = "ffc-multi-variation-test.json"
                    $aCheck = Get-Content $pathToJson | ConvertFrom-Json
                    Write-Host $aCheck.variable[0].value
                    
                    $pathToJson2 = "ffc-multi-variation-ffp-test.json"
                    $a2 = Get-Content $pathToJson2 | ConvertFrom-Json
                    $a2.variable[0].value = "$(API_URL_Dev)"
                    ConvertTo-Json $a2 -depth 100  | set-content $pathToJson2
                    
                    $pathToJsonCheck2 = "ffc-multi-variation-ffp-test.json"
                    $aCheck2 = Get-Content $pathToJson2 | ConvertFrom-Json
                    Write-Host $aCheck2.variable[0].value
                    
                    $pathToJson3 = "ffc-multi-variation-cache-test.json"
                    $a3 = Get-Content $pathToJson3 | ConvertFrom-Json
                    $a3.variable[0].value = "$(API_URL_Dev)"
                    ConvertTo-Json $a3 -depth 100  | set-content $pathToJson3
                    
                    $pathToJsonCheck3 = "ffc-multi-variation-cache-test.json"
                    $aCheck3 = Get-Content $pathToJson3 | ConvertFrom-Json
                    Write-Host $aCheck3.variable[0].value
              
              - task: Bash@3
                displayName: 'run newman'
                inputs:
                  targetType: 'inline'
                  script: |
                    cd FeatureFlagsCo.APIs
                    cd FeatureFlagsCo.APIs.Tests
                    cd Postman.IntegrationTests
                    npm install -g newman
                    newman run ffc-multi-variation-test.json --reporters cli,junit --reporter-junit-export junit-report.xml
              
              - task: Bash@3
                displayName: 'run newman'
                inputs:
                  targetType: 'inline'
                  script: |
                    cd FeatureFlagsCo.APIs
                    cd FeatureFlagsCo.APIs.Tests
                    cd Postman.IntegrationTests
                    npm install -g newman
                    newman run ffc-multi-variation-ffp-test.json --reporters cli,junit --reporter-junit-export junit-report2.xml

              - task: Bash@3
                displayName: 'run newman'
                inputs:
                  targetType: 'inline'
                  script: |
                    cd FeatureFlagsCo.APIs
                    cd FeatureFlagsCo.APIs.Tests
                    cd Postman.IntegrationTests
                    npm install -g newman
                    newman run ffc-multi-variation-cache-test.json --reporters cli,junit --reporter-junit-export junit-report3.xml

              - task: PublishTestResults@2
                inputs:
                  testResultsFormat: 'JUnit'
                  testResultsFiles: '**/*.xml'
                  mergeTestResults: true
                  failTaskOnFailedTests: true
                displayName: 'Publish Test Results'   


- stage: 'Production'
  condition: succeeded()
  jobs:
  - deployment: 'DeployToProduction'
    environment: 'Approval_API'
    strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - task: UseDotNet@2
                displayName: Install .NET Core SDK
                inputs:
                  version: 3.1.x
                  packageType: runtime

              - task: PowerShell@2
                displayName: Replace Settings
                inputs:
                  targetType: 'inline'
                  script: |
                    cd FeatureFlagsCo.APIs/FeatureFlags.APIs
                    $pathToJson = "appsettings.json"
                    $a = Get-Content $pathToJson | ConvertFrom-Json
            
                    $a.ConnectionStrings.ConnStr = "$(SQLDATABASE_ConnectionString)"
                    $a.ConnectionStrings.RedisServerUrl = "$(REDISCACHE_ConnectionString)"
                    $a.JWT.Secret = "$(JWT_Secret)"

                    $a.ApplicationInsights.InstrumentationKey = "$(AppInsights_InstrumentationKey)"
                    $a.ApplicationInsights.ConnectionString = "$(AppInsights_ConnectionString)"
                    
                    $a.MySettings.AppInsightsApplicationId = "$(AppInsights_ApplicationId)"
                    $a.MySettings.AppInsightsApplicationApiSecret = "$(AppInsights_ApplicationApiSecret)"

                    $a.MySettings.InsightsRabbitMqUrl = "$(MySettings_InsightsRabbitMqUrl)"
                    $a.MySettings.ElasticSearchHost = "$(MySettings_ElasticSearchHost)"
                    $a.MySettings.CacheType = "$(MySettings_CacheType)"
                    
                    $a.MySettings.ExperimentsServiceHost = "$(MySettings_ExperimentsServiceHost)"
                    $a.MySettings.MessagingServiceHost = "$(MySettings_MessagingServiceHost)"

                    $a.MongoDbSettings.ConnectionString = "$(MongoDbSettings_ConnectionString)"
                    $a.MongoDbSettings.DatabaseName = "$(MongoDbSettings_DatabaseName)"

                    # authing service variables
                    $a.Authing.AppId = "$(Authing_AppId)"
                    
                    ConvertTo-Json $a -depth 100  | set-content $pathToJson

                    $pathToJsonCheck = "appsettings.json"
                    $aCheck = Get-Content $pathToJson | ConvertFrom-Json
                    Write-Host $aCheck.ConnectionStrings.ConnStr
                    Write-Host $aCheck.ConnectionStrings.RedisServerUrl
                    Write-Host $aCheck.JWT.Secret
                    Write-Host $aCheck.ApplicationInsights.InstrumentationKey
                    Write-Host $aCheck.ApplicationInsights.ConnectionString
                    Write-Host $aCheck.MySettings.AppInsightsApplicationId
                    Write-Host $aCheck.MySettings.InsightsRabbitMqUrl
                    Write-Host $aCheck.MySettings.ElasticSearchHost
                    Write-Host $aCheck.MongoDbSettings.ConnectionString
                    Write-Host $aCheck.MongoDbSettings.DatabaseName
                    Write-Host $aCheck.MongoDbSettings.ExperimentsServiceHost


              - task: DotNetCoreCLI@2
                displayName: dotnet restore
                inputs:
                  command: restore
                  projects: '**/FeatureFlagsCo.APIs/FeatureFlags.APIs/FeatureFlags.APIs.csproj'
              - task: DotNetCoreCLI@2
                inputs:
                  command: 'build'
                  projects: '**/FeatureFlagsCo.APIs/FeatureFlags.APIs/FeatureFlags.APIs.csproj'
    
              - task: DotNetCoreCLI@2
                inputs:
                  command: publish
                  publishWebProjects: True
                  arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
                  zipAfterPublish: True

              - task: AzureWebApp@1
                inputs:
                  azureSubscription: 'azure-china-devops'
                  appType: 'webApp'
                  appName: 'ffc-webapp-api-ce2'
                  package: '$(Build.ArtifactStagingDirectory)/**/FeatureFlags.APIs.zip'
                  deploymentMethod: 'auto'