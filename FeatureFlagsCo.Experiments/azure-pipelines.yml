# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest


variables:
- group: MJKG_EXPERIMENT_SETTINGS


stages:

- stage: 'Development'
  jobs:
  - deployment: 'DeployToDevelopment'
    environment: 'Approval_ExperimentService_Dev'
    strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self

            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: 'ls $(System.DefaultWorkingDirectory)'

            - task: PowerShell@2
              inputs:
                targetType: 'inline'
                script: |
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{elasticurl}}','http://52.131.239.36:9200' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{elasticusername}}','elastic' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{elasticpassword}}','$(ES_Password_Dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{elasticpassword}}','$(ES_Password_Dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini

                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{mq_host}}','$(mq_host_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{mq_port}}','$(mq_port_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{mq_username}}','$(mq_username_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{mq_passwd}}','$(mq_passwd_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{redis_host}}','$(redis_host_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{redis_port}}','$(redis_port_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{redis_passwd}}','$(redis_passwd_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{wait_timeout}}','$(wait_timeout_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{fully_qualified_namespace}}','$(fully_qualified_namespace_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{sas_policy}}','$(sas_policy_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{servicebus_sas_key}}','$(servicebus_sas_key_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{insignt_conn_str}}','$(insignt_conn_str_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{p1_prefetch_count}}','$(p1_prefetch_count_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{p2_prefetch_count}}','$(p2_prefetch_count_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{p3_prefetch_count}}','$(p3_prefetch_count_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{redis_ssl}}','$(redis_ssl_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{engine}}','$(engine_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini -Raw) -replace '{{redis_mode}}','$(redis_mode_dev)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  
                  $a = Get-Content $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-dev-config.ini
                  Write-Host $a
                  
            - task: DockerCompose@0
              inputs:
                containerregistrytype: 'Azure Container Registry'
                azureSubscription: 'azure-china-devops'
                azureContainerRegistry: '{"loginServer":"ffc0acr0ce20dev.azurecr.cn", "id" : "/subscriptions/2679f75f-10cb-466f-b2b4-ea24653a0e5c/resourceGroups/feature-flags-co-dev/providers/Microsoft.ContainerRegistry/registries/ffc0acr0ce20dev"}'
                dockerComposeFile: '$(System.DefaultWorkingDirectory)/FeatureFlagsCo.Experiments/docker-compose-dev.yml'
                action: 'Build services'
                includeLatestTag: true
                additionalImageTags: $(Build.BuildId)
                projectName: 'ffc-experiments-dev'

            - task: DockerCompose@0
              inputs:
                containerregistrytype: 'Azure Container Registry'
                azureSubscription: 'azure-china-devops'
                azureContainerRegistry: '{"loginServer":"ffc0acr0ce20dev.azurecr.cn", "id" : "/subscriptions/2679f75f-10cb-466f-b2b4-ea24653a0e5c/resourceGroups/feature-flags-co-dev/providers/Microsoft.ContainerRegistry/registries/ffc0acr0ce20dev"}'
                dockerComposeFile: '$(System.DefaultWorkingDirectory)/FeatureFlagsCo.Experiments/docker-compose-dev.yml'
                action: 'Push services'
                includeLatestTag: true
                additionalImageTags: $(Build.BuildId)
                projectName: 'ffc-experiments-dev'

            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'azure-china-devops'
                appType: 'webAppContainer'
                WebAppName: 'ffc-webapp-expeirmentservice-ce2-dev'
                DockerNamespace: 'ffc0acr0ce20dev.azurecr.cn'
                DockerRepository: 'ffc-experiments-dev'
                DockerImageTag: '$(Build.BuildId)'



- stage: 'Production'
  condition: succeeded()
  jobs:
  - deployment: 'DeployToProduction'
    environment: 'Approval_ExperimentService'
    strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self

            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: 'ls $(System.DefaultWorkingDirectory)'

            - task: PowerShell@2
              inputs:
                targetType: 'inline'
                script: |
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{elasticurl}}','http://52.130.248.239:9200' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{elasticusername}}','elastic' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{elasticpassword}}','$(ES_Password)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{mq_host}}','$(mq_host_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{mq_port}}','$(mq_port_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{mq_username}}','$(mq_username_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{mq_passwd}}','$(mq_passwd_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{redis_host}}','$(redis_host_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{redis_port}}','$(redis_port_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{redis_passwd}}','$(redis_passwd_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{wait_timeout}}','$(wait_timeout_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{fully_qualified_namespace}}','$(fully_qualified_namespace_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{sas_policy}}','$(sas_policy_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{servicebus_sas_key}}','$(servicebus_sas_key_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{insignt_conn_str}}','$(insignt_conn_str_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{p1_prefetch_count}}','$(p1_prefetch_count_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{p2_prefetch_count}}','$(p2_prefetch_count_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{p3_prefetch_count}}','$(p3_prefetch_count_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{redis_ssl}}','$(redis_ssl_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{engine}}','$(engine_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini
                  (Get-Content -path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini -Raw) -replace '{{redis_mode}}','$(redis_mode_prod)' | Set-Content -Path $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini

                  $a = Get-Content $(System.DefaultWorkingDirectory)\FeatureFlagsCo.Experiments\env\docker-prod-config.ini

                  Write-Host $a
            - task: DockerCompose@0
              inputs:

                containerregistrytype: 'Azure Container Registry'
                azureSubscription: 'azure-china-devops'
                azureContainerRegistry: '{"loginServer":"ffc0acr0ce2.azurecr.cn", "id" : "/subscriptions/2679f75f-10cb-466f-b2b4-ea24653a0e5c/resourceGroups/feature-flags-co/providers/Microsoft.ContainerRegistry/registries/ffc0acr0ce2"}'
                dockerComposeFile: '$(System.DefaultWorkingDirectory)/FeatureFlagsCo.Experiments/docker-compose.yml'
                action: 'Build services'
                includeLatestTag: true
                additionalImageTags: $(Build.BuildId)
                projectName: 'ffc-experiments'

            - task: DockerCompose@0
              inputs:
                containerregistrytype: 'Azure Container Registry'
                azureSubscription: 'azure-china-devops'
                azureContainerRegistry: '{"loginServer":"ffc0acr0ce2.azurecr.cn", "id" : "/subscriptions/2679f75f-10cb-466f-b2b4-ea24653a0e5c/resourceGroups/feature-flags-co/providers/Microsoft.ContainerRegistry/registries/ffc0acr0ce2"}'
                dockerComposeFile: '$(System.DefaultWorkingDirectory)/FeatureFlagsCo.Experiments/docker-compose.yml'
                action: 'Push services'
                includeLatestTag: true
                additionalImageTags: $(Build.BuildId)
                projectName: 'ffc-experiments'


            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: 'azure-china-devops'
                appType: 'webAppContainer'
                WebAppName: 'ffc-webapp-expeirmentservice-ce2'
                DockerNamespace: 'ffc0acr0ce2.azurecr.cn'
                DockerRepository: 'ffc-experiments'
                DockerImageTag: '$(Build.BuildId)'
